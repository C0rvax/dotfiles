RED='\e[1;31m'
GREEN='\e[1;32m'
YELLOW='\e[1;33m'
BLUE='\e[1;34m'
VIOLET='\e[1;35m'
CYAN='\e[1;36m'
WHITE='\e[1;37m'
REDHI='\e[1;91m'
GREENHI='\e[1;92m'
YELLOWHI='\e[1;93m'
BLUEHI='\e[1;94m'
RESET='\e[0;m'

# ==============================================================================
# FICHIER DE CONFIGURATION DES INSTALLABLES
# Ce fichier définit les paquets et configurations à installer.
# Il utilise des tableaux associatifs pour stocker les informations.
# ==============================================================================
declare -gA INSTALLABLES_DESC         # Description pour l'utilisateur
declare -gA INSTALLABLES_CHECK        # Commande pour vérifier si c'est installé
declare -gA INSTALLABLES_INSTALL      # Commande pour installer/configurer
declare -gA INSTALLABLES_LEVEL        # Niveau ('base' ou 'full')
declare -gA INSTALLABLES_CATEGORY     # Catégorie (pour l'affichage groupé)

# --- Définition des Catégories ---
# Le premier argument est le nom de la variable tableau, le second est le titre.
declare -a CATEGORIES_ORDER=(
    "C_CORE_UTILS: Utilitaires de base"
    "C_UTILS: Utilitaires système"
    "C_DEV: Développement et Compilation"
    "C_SHELL: Terminal et Shell"
    "C_NVIM: Dépendances Neovim"
    "C_APPS: Applications graphiques"
    "C_SPECIFIC: Configurations Spécifiques"
    "C_EMBEDDED: Développement embarqué (Optionnel)"
    "C_OFFICE: Suite bureautique (Optionnel)"
)

# ==============================================================================
# LISTE DES "INSTALLABLES"
# Pour chaque item, on remplit les 4 tableaux associatifs.
# ==============================================================================

# --- Catégorie: Utilitaires de base ---
declare -a C_CORE_UTILS=('curl' 'git' 'ufw' 'wget')
for pkg in "${C_CORE_UTILS[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="base"
    INSTALLABLES_CATEGORY[$pkg]="C_CORE_UTILS"
done

# --- Catégorie: Utilitaires système ---
declare -a C_UTILS=('htop' 'btop' 'inxi' 'nala' 'neofetch' 'net-tools' 'sensors' 'tree')
for pkg in "${C_UTILS[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="full"
    INSTALLABLES_CATEGORY[$pkg]="C_UTILS"
done

# --- Catégorie: Développement et Compilation ---
declare -a C_DEV=('clang' 'cmake' 'gcc' 'make' 'valgrind' 'python3' 'python3-pip')
for pkg in "${C_DEV[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="base"
    INSTALLABLES_CATEGORY[$pkg]="C_DEV"
done

# --- Catégorie: Terminal et Shell ---
declare -a C_SHELL=('terminator' 'zsh')
for pkg in "${C_SHELL[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="base"
    INSTALLABLES_CATEGORY[$pkg]="C_SHELL"
done

# --- Catégorie: Dépendances Neovim ---
declare -a C_NVIM=('fd-find' 'fzf' 'pipx' 'ripgrep' 'xclip')
for pkg in "${C_NVIM[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="base"
    INSTALLABLES_CATEGORY[$pkg]="C_NVIM"
done

# --- Catégorie: Applications graphiques ---
declare -a C_APPS=('gimp' 'gnome-disk-utility' 'gparted' 'vlc')
for pkg in "${C_APPS[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="full"
    INSTALLABLES_CATEGORY[$pkg]="C_APPS"
done

# --- Catégorie: Configurations Spécifiques (ANCIENS install_... ) ---
declare -a C_SPECIFIC=('fonts' 'zsh_config' 'nvim_app' 'ssh_git' 'docker' 'node' 'firefox' 'veracrypt')
# On les définit manuellement car leurs commandes sont uniques.
INSTALLABLES_DESC['fonts']="Fonts/Icons"
INSTALLABLES_CHECK['fonts']="check_file '$HOME/Themes/Fonts/MesloLGS NF Regular.ttf'"
INSTALLABLES_INSTALL['fonts']="install_fonts"
INSTALLABLES_LEVEL['fonts']="base"
INSTALLABLES_CATEGORY['fonts']="C_SPECIFIC"

INSTALLABLES_DESC['zsh_config']="Cfg ZSH (OMZ+p10k)"
INSTALLABLES_CHECK['zsh_config']="check_directory '$HOME/.oh-my-zsh'"
INSTALLABLES_INSTALL['zsh_config']="install_zsh && install_zconfig" # On peut chaîner les commandes
INSTALLABLES_LEVEL['zsh_config']="base"
INSTALLABLES_CATEGORY['zsh_config']="C_SPECIFIC"

INSTALLABLES_DESC['nvim_app']="Cfg Neovim"
INSTALLABLES_CHECK['nvim_app']="check_file '$HOME/AppImage/nvim.appimage'"
INSTALLABLES_INSTALL['nvim_app']="install_nvim"
INSTALLABLES_LEVEL['nvim_app']="base"
INSTALLABLES_CATEGORY['nvim_app']="C_SPECIFIC"

INSTALLABLES_DESC['ssh_git']="Cfg SSH & Git"
INSTALLABLES_CHECK['ssh_git']="check_file '$HOME/.ssh/id_ed25519'"
INSTALLABLES_INSTALL['ssh_git']="setup_ssh_and_git"
INSTALLABLES_LEVEL['ssh_git']="base"
INSTALLABLES_CATEGORY['ssh_git']="C_SPECIFIC"

INSTALLABLES_DESC['docker']="Docker (via GPG key)"
INSTALLABLES_CHECK['docker']="check_package 'docker-ce'"
INSTALLABLES_INSTALL['docker']="install_docker"
INSTALLABLES_LEVEL['docker']="full"
INSTALLABLES_CATEGORY['docker']="C_SPECIFIC"

INSTALLABLES_DESC['node']="NodeJS (via NVM)"
INSTALLABLES_CHECK['node']="check_directory '$HOME/.nvm'"
INSTALLABLES_INSTALL['node']="install_node"
INSTALLABLES_LEVEL['node']="full"
INSTALLABLES_CATEGORY['node']="C_SPECIFIC"

INSTALLABLES_DESC['firefox']="Firefox (Mozilla)"
INSTALLABLES_CHECK['firefox']="command -v firefox &>/dev/null && ! apt-cache policy firefox | grep -q 'snap'"
INSTALLABLES_INSTALL['firefox']="install_firefox"
INSTALLABLES_LEVEL['firefox']="base"
INSTALLABLES_CATEGORY['firefox']="C_SPECIFIC"

INSTALLABLES_DESC['veracrypt']="VeraCrypt"
INSTALLABLES_CHECK['veracrypt']="check_package 'veracrypt'"
INSTALLABLES_INSTALL['veracrypt']="install_veracrypt"
INSTALLABLES_LEVEL['veracrypt']="full"
INSTALLABLES_CATEGORY['veracrypt']="C_SPECIFIC"

# --- Catégories Optionnelles ---
declare -a C_EMBEDDED=('avr-libc' 'avrdude' 'nasm' 'screen')
for pkg in "${C_EMBEDDED[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="optional" # Niveau spécial pour la question
    INSTALLABLES_CATEGORY[$pkg]="C_EMBEDDED"
done

declare -a C_OFFICE=('libreoffice')
for pkg in "${C_OFFICE[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="optional"
    INSTALLABLES_CATEGORY[$pkg]="C_OFFICE"
done

LOGO=(
"

███╗   ███╗██╗   ██╗    ██████╗  ██████╗ ████████╗███████╗██╗██╗     ███████╗███████╗
████╗ ████║╚██╗ ██╔╝    ██╔══██╗██╔═══██╗╚══██╔══╝██╔════╝██║██║     ██╔════╝██╔════╝
██╔████╔██║ ╚████╔╝     ██║  ██║██║   ██║   ██║   █████╗  ██║██║     █████╗  ███████╗
██║╚██╔╝██║  ╚██╔╝      ██║  ██║██║   ██║   ██║   ██╔══╝  ██║██║     ██╔══╝  ╚════██║
██║ ╚═╝ ██║   ██║       ██████╔╝╚██████╔╝   ██║   ██║     ██║███████╗███████╗███████║
╚═╝     ╚═╝   ╚═╝       ╚═════╝  ╚═════╝    ╚═╝   ╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝
                                                                                     
"
)
