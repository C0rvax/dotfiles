# #!/bin/bash

# # Format: "id:description:level:category:check_cmd:install_cmd"
# SYSTEM_PACKAGES=(
#     # Base essentials
#     "curl:cURL:base:system:command -v curl:pkg_install curl"
#     "wget:Wget:base:system:command -v wget:pkg_install wget"
#     "git:Git:base:dev:command -v git:pkg_install git"
#     "ufw:Firewall UFW:base:system:command -v ufw:pkg_install ufw"
    
#     # Utilitaires système
#     "htop:htop:full:utils:command -v htop:pkg_install htop"
#     "btop:btop:full:utils:command -v btop:pkg_install btop"
#     "tree:tree:full:utils:command -v tree:pkg_install tree"
#     "neofetch:neofetch:full:utils:command -v neofetch:pkg_install neofetch"
#     "inxi:inxi:full:utils:command -v inxi:pkg_install inxi"

#     # Développement
#     "gcc:GCC Compiler:base:dev:command -v gcc:pkg_install gcc"
#     "make:Make:base:dev:command -v make:pkg_install make"
#     "cmake:CMake:base:dev:command -v cmake:pkg_install cmake"
#     "clang:Clang compiler:base:dev:command -v clang:pkg_install clang"
#     "valgrind:Valgrind:base:dev:command -v valgrind:pkg_install valgrind"
#     "python3:Python 3:base:dev:command -v python3:pkg_install python3"
#     "python3-pip:Python pip:base:dev:command -v pip3:pkg_install python3-pip"
    
#     # Terminal & Shell
#     "zsh:Z Shell:base:shell:command -v zsh:pkg_install zsh"
#     "terminator:Terminator:base:shell:command -v terminator:pkg_install terminator"
    
#     # Outils Neovim
#     "fzf:Fuzzy finder:base:nvim:command -v fzf:pkg_install fzf"
#     "ripgrep:Ripgrep:base:nvim:command -v rg:pkg_install ripgrep"
#     "fd-find:fd-find:base:nvim:command -v fdfind:pkg_install fd-find"
#     "xclip:Xclip:base:nvim:command -v xclip:pkg_install xclip"
#     "pipx:Pipx:base:nvim:command -v pipx:pkg_install pipx"
    
#     # Applications graphiques
#     "vlc:VLC:full:apps:command -v vlc:pkg_install vlc"
#     "gimp:GIMP:full:apps:command -v gimp:pkg_install gimp"
#     "gparted:GParted:full:apps:command -v gparted:pkg_install gparted"
#     "gnome-disk-utility:Disk Utility:full:apps:dpkg -s gnome-disk-utility:pkg_install gnome-disk-utility"
# )

# SPECIAL_INSTALLS=(
#     # Format: "id:description:level:category:check_cmd:install_function"
#     "fonts:MesloLGS+Icons:base:theme:check_fonts:install_fonts"
#     "zsh_config:Config Zsh/OMZ:base:shell:check_omz:install_zsh && install_zconfig"
#     "nvim:Neovim AppImage:base:nvim:check_nvim:install_nvim"
#     "ssh_git:SSH & Git config:base:dev:check_ssh_key:setup_ssh_and_git"
#     "firefox:Firefox Mozilla:base:apps:check_firefox_mozilla:install_firefox"
#     "docker:Docker CE:base:dev:check_docker:install_docker"
#     "node:Node.js/NVM:base:dev:check_nvm:install_node"
#     "veracrypt:VeraCrypt:full:apps:check_veracrypt:install_veracrypt"
# )

# OPTIONAL_PACKAGES=(
#     # Développement embarqué
#     "avr-libc:AVR C library:optional:embedded:dpkg -s avr-libc &>/dev/null:pkg_install avr-libc"
#     "avrdude:AVR programmer:optional:embedded:command -v avrdude:pkg_install avrdude"
#     "nasm:NASM assembler:optional:embedded:command -v nasm:pkg_install nasm"
#     "screen:Screen:optional:embedded:command -v screen:pkg_install screen"
    
#     # Bureautique
#     "libreoffice:LibreOffice suite:optional:office:dpkg -s libreoffice &>/dev/null:pkg_install libreoffice"
# )

# declare -a CATEGORIES=(
#     "system:Base System"
#     "utils:Utilities"
#     "dev:Development"
#     "shell:Terminal & Shell"
#     "nvim:Neovim Tools"
#     "apps:Applications"
#     "theme:Themes & Fonts"
#     "embedded:Embedded (optional)"
#     "office:Office (optional)"
# )

# check_fonts() {
#     [[ -f "$HOME/.local/share/fonts/MesloLGS NF Regular.ttf" ]]
# }
# check_omz() {
#     [[ -d "$HOME/.oh-my-zsh" ]]
# }
# check_nvim() {
#     [[ -x "$HOME/AppImage/nvim.appimage" ]]
# }
# check_ssh_key() {
#     [[ -f "$HOME/.ssh/id_ed25519" ]]
# }
# check_firefox_mozilla() {
#     apt-cache policy firefox 2>/dev/null | grep -q 'packages.mozilla.org'
# }
# check_docker() {
#     dpkg -s docker-ce &>/dev/null
# }
# check_nvm() {
#     [[ -d "$HOME/.nvm" ]]
# }
# check_veracrypt() {
#     dpkg -s veracrypt &>/dev/null
# }

# Format: "id:description:level:category:tags:check_cmd:install_cmd"
SYSTEM_PACKAGES=(
    # --- Paquets de BASE ---
    "curl:cURL:base:System:base:command -v curl:pkg_install curl"
    "wget:Wget:base:System:base:command -v wget:pkg_install wget"
    "git:Git:base:Development:base:command -v git:pkg_install git"
    "ufw:Firewall UFW:base:System:base:command -v ufw:pkg_install ufw"
    "zsh:Z Shell:base:Shell:base:command -v zsh:pkg_install zsh"
    "terminator:Terminator:base:Shell:base:command -v terminator:pkg_install terminator"
    "gcc:GCC Compiler:base:Development:dev-light:command -v gcc:pkg_install gcc"
    "make:Make:base:Development:dev-light:command -v make:pkg_install make"
    "python3:Python 3:base:Development:dev-light:command -v python3:pkg_install python3"
    "python3-pip:Python pip:base:Development:dev-light:command -v pip3:pkg_install python3-pip"
    "fzf:Fuzzy finder:base:Neovim:dev-light:command -v fzf:pkg_install fzf"
    "ripgrep:Ripgrep:base:Neovim:dev-light:command -v rg:pkg_install ripgrep"
    "fd-find:fd-find:base:Neovim:dev-light:command -v fdfind:pkg_install fd-find"
    "xclip:Xclip:base:Neovim:dev-light:command -v xclip:pkg_install xclip"

    # --- Paquets FULL ---
    "cmake:CMake:full:Development:dev-full:command -v cmake:pkg_install cmake"
    "clang:Clang Compiler:full:Development:dev-full:command -v clang:pkg_install clang"
    "valgrind:Valgrind:full:Development:dev-full:command -v valgrind:pkg_install valgrind"
    "pipx:Pipx for Py-tools:full:Neovim:dev-full:command -v pipx:pkg_install pipx"
    "vlc:VLC Media Player:full:Apps:gui:command -v vlc:pkg_install vlc"
    "gimp:GIMP Image Editor:full:Apps:gui:command -v gimp:pkg_install gimp"
    "gparted:GParted:full:Utilities:gui:command -v gparted:pkg_install gparted"
    "gnome-disk-utility:Disk Utility:full:Utilities:gui:dpkg -s gnome-disk-utility:pkg_install gnome-disk-utility"
    "htop:htop:full:Utilities:gui:command -v htop:pkg_install htop"
    "btop:btop:full:Utilities:gui:command -v btop:pkg_install btop"
    "tree:tree:full:Utilities:gui:command -v tree:pkg_install tree"
    "neofetch:neofetch:full:Utilities:gui:command -v neofetch:pkg_install neofetch"
    
    # --- Paquets GAMING (traités comme 'optional' dans l'ancien système) ---
    "steam:Steam:optional:Gaming:gaming:command -v steam:pkg_install steam"
    "lutris:Lutris:optional:Gaming:gaming:command -v lutris:pkg_install lutris"
    "mangohud:MangoHud Overlay:optional:Gaming:gaming:command -v mangohud:pkg_install mangohud"
)

SPECIAL_INSTALLS=(
    "fonts:MesloLGS+Icons:base:Theme:base:check_fonts:install_fonts"
    "zsh_config:Zsh/OMZ Config:base:Shell:base:check_omz:install_zsh && install_zconfig"
    "ssh_git:SSH & Git Config:base:Development:base:check_ssh_key:setup_ssh_and_git"
    "nvim:Neovim AppImage:base:Neovim:dev-light:check_nvim:install_nvim"
    "node:Node.js (via NVM):full:Development:dev-full:check_nvm:install_node"
    "docker:Docker CE:full:Development:dev-full:check_docker:install_docker"
    "firefox:Firefox (Mozilla):full:Apps:gui:check_firefox_mozilla:install_firefox"
    "veracrypt:VeraCrypt:full:Apps:gui:check_veracrypt:install_veracrypt"
)

OPTIONAL_PACKAGES=(
    "libreoffice:LibreOffice Suite:optional:Office:office:command -v libreoffice:pkg_install libreoffice"
    "avr-libc:AVR C library:optional:Embedded:embedded:dpkg -s avr-libc &>/dev/null:pkg_install avr-libc"
    "avrdude:AVR programmer:optional:Embedded:embedded:command -v avrdude:pkg_install avrdude"
)

declare -a CATEGORIES=(
    "System:System Base"
    "Utilities:Utilities"
    "Development:Development Tools"
    "Shell:Terminal & Shell"
    "Neovim:Neovim & Tools"
    "Apps:GUI Applications"
    "Theme:Themes & Fonts"
    "Gaming:Gaming"
    "Office:Office Suite"
    "Embedded:Embedded Dev"
)

check_fonts() { [[ -f "$HOME/.local/share/fonts/MesloLGS NF Regular.ttf" ]]; }
check_omz() { [[ -d "$HOME/.oh-my-zsh" ]]; }
check_nvim() { [[ -x "$HOME/AppImage/nvim.appimage" ]]; }
check_ssh_key() { [[ -f "$HOME/.ssh/id_ed25519" ]]; }
check_firefox_mozilla() { apt-cache policy firefox 2>/dev/null | grep -q 'packages.mozilla.org'; }
check_docker() { dpkg -s docker-ce &>/dev/null; }
check_nvm() { [[ -d "$HOME/.nvm" ]]; }
check_veracrypt() { dpkg -s veracrypt &>/dev/null; }