#!/bin/bash

declare -gA INSTALLABLES_DESC         # Description pour l'utilisateur
declare -gA INSTALLABLES_CHECK        # Commande pour vérifier si c'est installé
declare -gA INSTALLABLES_INSTALL      # Commande pour installer/configurer
declare -gA INSTALLABLES_LEVEL        # Niveau ('base' ou 'full')
declare -gA INSTALLABLES_CATEGORY     # Catégorie (pour l'affichage groupé)

# --- Définition des Catégories ---
# Le premier argument est le nom de la variable tableau, le second est le titre.
declare -a CATEGORIES_ORDER=(
    "C_CORE_UTILS: Utilitaires de base"
    "C_UTILS: Utilitaires système"
    "C_DEV: Développement et Compilation"
    "C_SHELL: Terminal et Shell"
    "C_NVIM: Dépendances Neovim"
    "C_APPS: Applications graphiques"
    "C_SPECIFIC: Configurations Spécifiques"
    "C_EMBEDDED: Développement embarqué (Optionnel)"
    "C_OFFICE: Suite bureautique (Optionnel)"
)

# ==============================================================================
# LISTE DES "INSTALLABLES"
# Pour chaque item, on remplit les 4 tableaux associatifs.
# ==============================================================================

# --- Catégorie: Utilitaires de base ---
declare -a C_CORE_UTILS=('curl' 'git' 'ufw' 'wget')
for pkg in "${C_CORE_UTILS[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="base"
    INSTALLABLES_CATEGORY[$pkg]="C_CORE_UTILS"
done

# --- Catégorie: Utilitaires système ---
declare -a C_UTILS=('htop' 'btop' 'inxi' 'nala' 'neofetch' 'net-tools' 'sensors' 'tree')
for pkg in "${C_UTILS[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="full"
    INSTALLABLES_CATEGORY[$pkg]="C_UTILS"
done

# --- Catégorie: Développement et Compilation ---
declare -a C_DEV=('clang' 'cmake' 'gcc' 'make' 'valgrind' 'python3' 'python3-pip')
for pkg in "${C_DEV[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="base"
    INSTALLABLES_CATEGORY[$pkg]="C_DEV"
done

# --- Catégorie: Terminal et Shell ---
declare -a C_SHELL=('terminator' 'zsh')
for pkg in "${C_SHELL[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="base"
    INSTALLABLES_CATEGORY[$pkg]="C_SHELL"
done

# --- Catégorie: Dépendances Neovim ---
declare -a C_NVIM=('fd-find' 'fzf' 'pipx' 'ripgrep' 'xclip')
for pkg in "${C_NVIM[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="base"
    INSTALLABLES_CATEGORY[$pkg]="C_NVIM"
done

# --- Catégorie: Applications graphiques ---
declare -a C_APPS=('gimp' 'gnome-disk-utility' 'gparted' 'vlc')
for pkg in "${C_APPS[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="full"
    INSTALLABLES_CATEGORY[$pkg]="C_APPS"
done

# --- Catégorie: Configurations Spécifiques (ANCIENS install_... ) ---
declare -a C_SPECIFIC=('fonts' 'zsh_config' 'nvim_app' 'ssh_git' 'docker' 'node' 'firefox' 'veracrypt')
# On les définit manuellement car leurs commandes sont uniques.
INSTALLABLES_DESC['fonts']="Fonts/Icons"
INSTALLABLES_CHECK['fonts']="check_file '$HOME/Themes/Fonts/MesloLGS NF Regular.ttf'"
INSTALLABLES_INSTALL['fonts']="install_fonts"
INSTALLABLES_LEVEL['fonts']="base"
INSTALLABLES_CATEGORY['fonts']="C_SPECIFIC"

INSTALLABLES_DESC['zsh_config']="Cfg ZSH (OMZ+p10k)"
INSTALLABLES_CHECK['zsh_config']="check_directory '$HOME/.oh-my-zsh'"
INSTALLABLES_INSTALL['zsh_config']="install_zsh && install_zconfig" # On peut chaîner les commandes
INSTALLABLES_LEVEL['zsh_config']="base"
INSTALLABLES_CATEGORY['zsh_config']="C_SPECIFIC"

INSTALLABLES_DESC['nvim_app']="Cfg Neovim"
INSTALLABLES_CHECK['nvim_app']="check_file '$HOME/AppImage/nvim.appimage'"
INSTALLABLES_INSTALL['nvim_app']="install_nvim"
INSTALLABLES_LEVEL['nvim_app']="base"
INSTALLABLES_CATEGORY['nvim_app']="C_SPECIFIC"

INSTALLABLES_DESC['ssh_git']="Cfg SSH & Git"
INSTALLABLES_CHECK['ssh_git']="check_file '$HOME/.ssh/id_ed25519'"
INSTALLABLES_INSTALL['ssh_git']="setup_ssh_and_git"
INSTALLABLES_LEVEL['ssh_git']="base"
INSTALLABLES_CATEGORY['ssh_git']="C_SPECIFIC"

INSTALLABLES_DESC['docker']="Docker (via GPG key)"
INSTALLABLES_CHECK['docker']="check_package 'docker-ce'"
INSTALLABLES_INSTALL['docker']="install_docker"
INSTALLABLES_LEVEL['docker']="full"
INSTALLABLES_CATEGORY['docker']="C_SPECIFIC"

INSTALLABLES_DESC['node']="NodeJS (via NVM)"
INSTALLABLES_CHECK['node']="check_directory '$HOME/.nvm'"
INSTALLABLES_INSTALL['node']="install_node"
INSTALLABLES_LEVEL['node']="full"
INSTALLABLES_CATEGORY['node']="C_SPECIFIC"

INSTALLABLES_DESC['firefox']="Firefox (Mozilla)"
INSTALLABLES_CHECK['firefox']="command -v firefox &>/dev/null && ! apt-cache policy firefox | grep -q 'snap'"
INSTALLABLES_INSTALL['firefox']="install_firefox"
INSTALLABLES_LEVEL['firefox']="base"
INSTALLABLES_CATEGORY['firefox']="C_SPECIFIC"

INSTALLABLES_DESC['veracrypt']="VeraCrypt"
INSTALLABLES_CHECK['veracrypt']="check_package 'veracrypt'"
INSTALLABLES_INSTALL['veracrypt']="install_veracrypt"
INSTALLABLES_LEVEL['veracrypt']="full"
INSTALLABLES_CATEGORY['veracrypt']="C_SPECIFIC"

# --- Catégories Optionnelles ---
declare -a C_EMBEDDED=('avr-libc' 'avrdude' 'nasm' 'screen')
for pkg in "${C_EMBEDDED[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="optional" # Niveau spécial pour la question
    INSTALLABLES_CATEGORY[$pkg]="C_EMBEDDED"
done

declare -a C_OFFICE=('libreoffice')
for pkg in "${C_OFFICE[@]}"; do
    INSTALLABLES_DESC[$pkg]="$pkg"
    INSTALLABLES_CHECK[$pkg]="check_package $pkg"
    INSTALLABLES_INSTALL[$pkg]="install_package $pkg"
    INSTALLABLES_LEVEL[$pkg]="optional"
    INSTALLABLES_CATEGORY[$pkg]="C_OFFICE"
done

LOGO=(
"

███╗   ███╗██╗   ██╗    ██████╗  ██████╗ ████████╗███████╗██╗██╗     ███████╗███████╗
████╗ ████║╚██╗ ██╔╝    ██╔══██╗██╔═══██╗╚══██╔══╝██╔════╝██║██║     ██╔════╝██╔════╝
██╔████╔██║ ╚████╔╝     ██║  ██║██║   ██║   ██║   █████╗  ██║██║     █████╗  ███████╗
██║╚██╔╝██║  ╚██╔╝      ██║  ██║██║   ██║   ██║   ██╔══╝  ██║██║     ██╔══╝  ╚════██║
██║ ╚═╝ ██║   ██║       ██████╔╝╚██████╔╝   ██║   ██║     ██║███████╗███████╗███████║
╚═╝     ╚═╝   ╚═╝       ╚═════╝  ╚═════╝    ╚═╝   ╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝
                                                                                     
"
)

# Format: "id:description:level:category:check_cmd:install_cmd"
SYSTEM_PACKAGES=(
    # Base essentials
    "curl:cURL:base:system:command -v curl:pkg_install curl"
    "wget:Wget:base:system:command -v wget:pkg_install wget"
    "git:Git VCS:base:dev:command -v git:pkg_install git"
    "ufw:Firewall UFW:base:system:command -v ufw:pkg_install ufw"
    
    # Utilitaires système
    "htop:Process viewer:full:utils:command -v htop:pkg_install htop"
    "btop:Modern htop:full:utils:command -v btop:pkg_install btop"
    "tree:Directory tree:full:utils:command -v tree:pkg_install tree"
    "neofetch:System info:full:utils:command -v neofetch:pkg_install neofetch"
    "inxi:Hardware info:full:utils:command -v inxi:pkg_install inxi"
    
    # Développement
    "gcc:GCC Compiler:base:dev:command -v gcc:pkg_install gcc"
    "make:Build tool:base:dev:command -v make:pkg_install make"
    "cmake:CMake:base:dev:command -v cmake:pkg_install cmake"
    "clang:Clang compiler:base:dev:command -v clang:pkg_install clang"
    "valgrind:Memory debugger:base:dev:command -v valgrind:pkg_install valgrind"
    "python3:Python 3:base:dev:command -v python3:pkg_install python3"
    "python3-pip:Python pip:base:dev:command -v pip3:pkg_install python3-pip"
    
    # Terminal & Shell
    "zsh:Z Shell:base:shell:command -v zsh:pkg_install zsh"
    "terminator:Terminal:base:shell:command -v terminator:pkg_install terminator"
    
    # Outils Neovim
    "fzf:Fuzzy finder:base:nvim:command -v fzf:pkg_install fzf"
    "ripgrep:Fast grep:base:nvim:command -v rg:pkg_install ripgrep"
    "fd-find:Fast find:base:nvim:command -v fdfind:pkg_install fd-find"
    "xclip:Clipboard:base:nvim:command -v xclip:pkg_install xclip"
    "pipx:Python apps:base:nvim:command -v pipx:pkg_install pipx"
    
    # Applications graphiques
    "vlc:Lecteur vidéo:full:apps:command -v vlc:pkg_install vlc"
    "gimp:Éditeur d'images:full:apps:command -v gimp:pkg_install gimp"
    "gparted:Partition editor:full:apps:command -v gparted:pkg_install gparted"
    "gnome-disk-utility:Disk utility:full:apps:dpkg -s gnome-disk-utility:pkg_install gnome-disk-utility"
)

SPECIAL_INSTALLS=(
    # Format: "id:description:level:category:check_cmd:install_function"
    "fonts:Polices système:base:theme:check_fonts:install_fonts"
    "zsh_config:Config Zsh/OMZ:base:shell:check_omz:install_zsh_config"
    "nvim:Neovim AppImage:base:editor:check_nvim:install_nvim"
    "ssh_git:SSH & Git config:base:dev:check_ssh_key:setup_ssh_git"
    "firefox:Firefox Mozilla:base:apps:check_firefox_mozilla:install_firefox"
    "docker:Docker CE:full:dev:check_docker:install_docker"
    "node:Node.js/NVM:full:dev:check_nvm:install_node"
    "veracrypt:VeraCrypt:full:security:check_veracrypt:install_veracrypt"
)

OPTIONAL_PACKAGES=(
    # Développement embarqué
    "avr-libc:AVR C library:optional:embedded:dpkg -s avr-libc:pkg_install avr-libc"
    "avrdude:AVR programmer:optional:embedded:command -v avrdude:pkg_install avrdude"
    "nasm:NASM assembler:optional:embedded:command -v nasm:pkg_install nasm"
    "screen:Terminal multiplexer:optional:embedded:command -v screen:pkg_install screen"
    
    # Bureautique
    "libreoffice:LibreOffice suite:optional:office:dpkg -s libreoffice:pkg_install libreoffice"
)

declare -A CATEGORIES=(
    ["system"]="🔧 Système de base"
    ["utils"]="⚙️  Utilitaires"
    ["dev"]="💻 Développement"
    ["shell"]="🐚 Terminal & Shell"
    ["nvim"]="📝 Outils Neovim"
    ["editor"]="✏️  Éditeur"
    ["apps"]="🖥️  Applications"
    ["theme"]="🎨 Thèmes & Polices"
    ["security"]="🔒 Sécurité"
    ["embedded"]="⚡ Embarqué (optionnel)"
    ["office"]="📄 Bureautique (optionnel)"
)

check_fonts() {
    [[ -f "$HOME/Themes/Fonts/MesloLGS NF Regular.ttf" ]]
}

check_omz() {
    [[ -d "$HOME/.oh-my-zsh" ]]
}

check_nvim() {
    [[ -x "$HOME/AppImage/nvim.appimage" ]]
}

check_ssh_key() {
    [[ -f "$HOME/.ssh/id_ed25519" ]]
}

check_firefox_mozilla() {
    command -v firefox >/dev/null && ! apt-cache policy firefox 2>/dev/null | grep -q snap
}

check_docker() {
    dpkg -s docker-ce >/dev/null 2>&1
}

check_nvm() {
    [[ -d "$HOME/.nvm" ]]
}

check_veracrypt() {
    dpkg -s veracrypt >/dev/null 2>&1
}
