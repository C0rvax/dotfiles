#!/bin/bash

# Format: "id:description:category:tags:check_cmd:install_cmd"
# Tags disponibles: base, gui, dev-light, dev-full, gaming, office, embedded

SYSTEM_PACKAGES=(
    # --- Paquets de BASE (inclus dans TOUS les profils) ---
    "curl:cURL:System:base:command -v curl:pkg_install curl"
    "wget:Wget:System:base:command -v wget:pkg_install wget"
    "git:Git:Development:base:command -v git:pkg_install git"
    "ufw:Firewall UFW:System:base:command -v ufw:pkg_install ufw"
    "zsh:Z Shell:Shell:base:command -v zsh:pkg_install zsh"
    "terminator:Terminator:Shell:base:command -v terminator:pkg_install terminator"

    # --- Paquets DEV-LIGHT ---
    "gcc:GCC Compiler:Development:dev-light:command -v gcc:pkg_install gcc"
    "make:Make:Development:dev-light:command -v make:pkg_install make"
    "python3:Python 3:Development:dev-light:command -v python3:pkg_install python3"
    "python3-pip:Python pip:Development:dev-light:command -v pip3:pkg_install python3-pip"
    "fzf:Fuzzy finder:Neovim:dev-light:command -v fzf:pkg_install fzf"
    "ripgrep:Ripgrep:Neovim:dev-light:command -v rg:pkg_install ripgrep"
    "fd-find:fd-find:Neovim:dev-light:command -v fdfind:pkg_install fd-find"
    "xclip:Xclip:Neovim:dev-light:command -v xclip:pkg_install xclip"

    # --- Paquets DEV-FULL (en plus de dev-light) ---
    "cmake:CMake:Development:dev-full:command -v cmake:pkg_install cmake"
    "clang:Clang Compiler:Development:dev-full:command -v clang:pkg_install clang"
    "valgrind:Valgrind:Development:dev-full:command -v valgrind:pkg_install valgrind"
    "pipx:Pipx for Py-tools:Neovim:dev-full:command -v pipx:pkg_install pipx"

    # --- Paquets GUI (applications graphiques) ---
    "vlc:VLC Media Player:Apps:gui:command -v vlc:pkg_install vlc"
    "gimp:GIMP Image Editor:Apps:gui:command -v gimp:pkg_install gimp"
    "gparted:GParted:Utilities:gui:command -v gparted:pkg_install gparted"
    "gnome-disk-utility:Disk Utility:Utilities:gui:dpkg -s gnome-disk-utility:pkg_install gnome-disk-utility"
    "htop:htop:Utilities:gui:command -v htop:pkg_install htop"
    "btop:btop:Utilities:gui:command -v btop:pkg_install btop"
    "tree:tree:Utilities:gui:command -v tree:pkg_install tree"
    "neofetch:neofetch:Utilities:gui:command -v neofetch:pkg_install neofetch"
    
    # --- Paquets GAMING ---
    "steam:Steam:Gaming:gaming:command -v steam:pkg_install steam"
    "lutris:Lutris:Gaming:gaming:command -v lutris:pkg_install lutris"
    "mangohud:MangoHud Overlay:Gaming:gaming:command -v mangohud:pkg_install mangohud"

    # --- Paquets OFFICE ---
    "libreoffice:LibreOffice Suite:Office:office:command -v libreoffice:pkg_install libreoffice"
)

SPECIAL_INSTALLS=(
    # Format: "id:description:category:tags:check_cmd:install_function"
    "fonts:MesloLGS+Icons:Theme:base:check_fonts:install_fonts"
    "zsh_config:Zsh/OMZ Config:Shell:base:check_omz:install_zsh && install_zconfig"
    "ssh_git:SSH & Git Config:Development:base:check_ssh_key:setup_ssh_and_git"
    "nvim:Neovim AppImage:Neovim:dev-light:check_nvim:install_nvim"
    "node:Node.js (via NVM):Development:dev-full:check_nvm:install_node"
    "docker:Docker CE:Development:dev-full:check_docker:install_docker"
    "firefox:Firefox (Mozilla):Apps:gui:check_firefox_mozilla:install_firefox"
    "veracrypt:VeraCrypt:Apps:gui:check_veracrypt:install_veracrypt"
)

# Ces paquets sont "spéciaux" car ils ne sont pas associés à un profil de base
# Ils peuvent être sélectionnés dans le mode 'Custom' du TUI.
OPTIONAL_PACKAGES=(
    "avr-libc:AVR C library:Embedded:embedded:dpkg -s avr-libc &>/dev/null:pkg_install avr-libc"
    "avrdude:AVR programmer:Embedded:embedded:command -v avrdude:pkg_install avrdude"
)

declare -a CATEGORIES=(
    "System:System Base"
    "Utilities:Utilities"
    "Development:Development Tools"
    "Shell:Terminal & Shell"
    "Neovim:Neovim & Tools"
    "Apps:GUI Applications"
    "Theme:Themes & Fonts"
    "Gaming:Gaming"
    "Office:Office Suite"
    "Embedded:Embedded Dev"
)

# ... (les fonctions check_* restent les mêmes) ...
check_fonts() { [[ -f "$HOME/.local/share/fonts/MesloLGS NF Regular.ttf" ]]; }
check_omz() { [[ -d "$HOME/.oh-my-zsh" ]]; }
check_nvim() { [[ -x "$HOME/AppImage/nvim.appimage" ]]; }
check_ssh_key() { [[ -f "$HOME/.ssh/id_ed25519" ]]; }
check_firefox_mozilla() { apt-cache policy firefox 2>/dev/null | grep -q 'packages.mozilla.org'; }
check_docker() { dpkg -s docker-ce &>/dev/null; }
check_nvm() { [[ -d "$HOME/.nvm" ]]; }
check_veracrypt() { dpkg -s veracrypt &>/dev/null; }