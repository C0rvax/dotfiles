#!/bin/bash

# ==============================================================================
# SYST√àME DE D√âFINITION DES PAQUETS (le seul et l'unique)
# ==============================================================================

# Format: "id:description:level:category:check_cmd:install_cmd"
SYSTEM_PACKAGES=(
    # Base essentials
    "curl:cURL:base:system:command -v curl:pkg_install curl"
    "wget:Wget:base:system:command -v wget:pkg_install wget"
    "git:Git VCS:base:dev:command -v git:pkg_install git"
    "ufw:Firewall UFW:base:system:command -v ufw:pkg_install ufw"
    
    # Utilitaires syst√®me
    "htop:Process viewer:full:utils:command -v htop:pkg_install htop"
    "btop:Modern htop:full:utils:command -v btop:pkg_install btop"
    "tree:Directory tree:full:utils:command -v tree:pkg_install tree"
    "neofetch:System info:full:utils:command -v neofetch:pkg_install neofetch"
    "inxi:Hardware info:full:utils:command -v inxi:pkg_install inxi"
    
    # D√©veloppement
    "gcc:GCC Compiler:base:dev:command -v gcc:pkg_install gcc"
    "make:Build tool:base:dev:command -v make:pkg_install make"
    "cmake:CMake:base:dev:command -v cmake:pkg_install cmake"
    "clang:Clang compiler:base:dev:command -v clang:pkg_install clang"
    "valgrind:Memory debugger:base:dev:command -v valgrind:pkg_install valgrind"
    "python3:Python 3:base:dev:command -v python3:pkg_install python3"
    "python3-pip:Python pip:base:dev:command -v pip3:pkg_install python3-pip"
    
    # Terminal & Shell
    "zsh:Z Shell:base:shell:command -v zsh:pkg_install zsh"
    "terminator:Terminal:base:shell:command -v terminator:pkg_install terminator"
    
    # Outils Neovim
    "fzf:Fuzzy finder:base:nvim:command -v fzf:pkg_install fzf"
    "ripgrep:Fast grep:base:nvim:command -v rg:pkg_install ripgrep"
    "fd-find:Fast find:base:nvim:command -v fdfind:pkg_install fd-find"
    "xclip:Clipboard:base:nvim:command -v xclip:pkg_install xclip"
    "pipx:Python apps:base:nvim:command -v pipx:pkg_install pipx"
    
    # Applications graphiques
    "vlc:vlc:full:apps:command -v vlc:pkg_install vlc"
    "gimp:gimp:full:apps:command -v gimp:pkg_install gimp"
    "gparted:gparted:full:apps:command -v gparted:pkg_install gparted"
    "gnome-disk-utility:Disk utility:full:apps:dpkg -s gnome-disk-utility:pkg_install gnome-disk-utility"
)

SPECIAL_INSTALLS=(
    # Format: "id:description:level:category:check_cmd:install_function"
    "fonts:MesloLGS+Icons:base:theme:check_fonts:install_fonts"
    "zsh_config:Config Zsh/OMZ:base:shell:check_omz:install_zsh && install_zconfig"
    "nvim:Neovim AppImage:base:nvim:check_nvim:install_nvim"
    "ssh_git:SSH & Git config:base:dev:check_ssh_key:setup_ssh_and_git"
    "firefox:Firefox Mozilla:base:apps:check_firefox_mozilla:install_firefox"
    "docker:Docker CE:full:dev:check_docker:install_docker"
    "node:Node.js/NVM:full:dev:check_nvm:install_node"
    "veracrypt:VeraCrypt:full:apps:check_veracrypt:install_veracrypt"
)

OPTIONAL_PACKAGES=(
    # D√©veloppement embarqu√©
    "avr-libc:AVR C library:optional:embedded:dpkg -s avr-libc &>/dev/null:pkg_install avr-libc"
    "avrdude:AVR programmer:optional:embedded:command -v avrdude:pkg_install avrdude"
    "nasm:NASM assembler:optional:embedded:command -v nasm:pkg_install nasm"
    "screen:Terminal multiplexer:optional:embedded:command -v screen:pkg_install screen"
    
    # Bureautique
    "libreoffice:LibreOffice suite:optional:office:dpkg -s libreoffice &>/dev/null:pkg_install libreoffice"
)

# declare -A CATEGORIES=(
#     ["system"]="üîß Syst√®me de base"
#     ["utils"]="‚öôÔ∏è  Utilitaires"
#     ["dev"]="üíª D√©veloppement"
#     ["shell"]="üêö Terminal & Shell"
#     ["nvim"]="üìù Outils Neovim"
#     ["editor"]="‚úèÔ∏è  √âditeur"
#     ["apps"]="üñ•Ô∏è  Applications"
#     ["theme"]="üé® Th√®mes & Polices"
#     ["security"]="üîí S√©curit√©"
#     ["embedded"]="‚ö° Embarqu√© (optionnel)"
#     ["office"]="üìÑ Bureautique (optionnel)"
# )

declare -a CATEGORIES=(
    "system:Syst√®me de base"
    "utils:Utilitaires"
    "dev:D√©veloppement"
    "shell:Terminal & Shell"
    "nvim:Outils Neovim"
    "apps:Applications"
    "theme:Th√®mes & Polices"
    "embedded:Embarqu√© (optionnel)"
    "office:Bureautique (optionnel)"
)

# Fonctions de check pour les installations sp√©ciales
check_fonts() {
    [[ -f "$HOME/Themes/Fonts/MesloLGS NF Regular.ttf" ]]
}
check_omz() {
    [[ -d "$HOME/.oh-my-zsh" ]]
}
check_nvim() {
    [[ -x "$HOME/AppImage/nvim.appimage" ]]
}
check_ssh_key() {
    [[ -f "$HOME/.ssh/id_ed25519" ]]
}
check_firefox_mozilla() {
    command -v firefox >/dev/null && ! apt-cache policy firefox 2>/dev/null | grep -q snap
}
check_docker() {
    dpkg -s docker-ce &>/dev/null
}
check_nvm() {
    [[ -d "$HOME/.nvm" ]]
}
check_veracrypt() {
    dpkg -s veracrypt &>/dev/null
}

pkg_install() {
	local package="$1"
    # On utilise la fonction de logging de system.sh
	log "INFO" "Installation du paquet : $package"
	
    if [[ "$DRY_RUN" == "true" ]]; then
		log "INFO" "[DRY-RUN] Commande : sudo apt-get install -y $package"
		return 0
	fi

	case "$DISTRO" in
	ubuntu | debian)
		sudo apt-get install -y "$package" >>"$LOG_FILE" 2>&1
		;;
	arch)
		sudo pacman -S --noconfirm "$package" >>"$LOG_FILE" 2>&1
		;;
	fedora)
		sudo dnf install -y "$package" >>"$LOG_FILE" 2>&1
		;;
	*)
        log "ERROR" "Gestionnaire de paquets non support√© pour '$package'."
		return 1
		;;
	esac
}